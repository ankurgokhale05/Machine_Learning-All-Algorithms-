help(plot)
x<-c(1,2,3,4)
x
y<-c("one","two","three")
y
z<-c("TRUE","FALSE","TRUE")
Z
z
t<-c(1,1,2,3,5)
t
len(x)
length(x)
mode(x)
A<(1:8)
A<1:8
A<-1:8
matrix(A,nrow = 2,ncol = 4,byrow = TRUE)
E<-0:0
matrix(E,nrow = 3,ncol = 3,byrow = TRUE)
P<-c(1,2,3,4,5,6,7,8)
dim(P)<-c(2,4)
P
Y<-C(1,2,3,4,5,6,7,8)
Y<-c(1,2,3,4,5,6,7,8)
dim(Y)<-c(2,2,2)
Y
cols<-c("blue","red","blue","grey","red")
cols<-factor(cols)
cols
cols<-c("apples","banana","orange","apples","apples","orange")
cols<-factor(cols)
cols
lfriends<-list("Harry","Ron","Hermione")
lfriends
lst<-list(c("Harry","Ron","Hermione"))
lst<-list(c("Harry","Ron","Hermione")),
lst<-list(c("Harry","Ron","Hermione")),
lst<-list(c("Harry","Ron","Hermione"))
lst
lst<-matrix(1:6,nrow=2,ncol=3)
lst
lst<-factor(c("yes","no","yes"))
lst<-factor(c("yes","no","yes","no","yes"))
lst
lst<-lfriends
lst
elements<-data.frame()
name=c("hydrgen","oxygen","nitrogen")
symbols=c("H","O","N")
number=c(1,7,8)
elements
number=c(1,7,8))
number=c(1,7,8)
View(elements)
number=c(1,7,8)
elements<-data.frame(
> name=c("hydrgen","oxygen","nitrogen")
> symbols=c("H","O","N")
> number=c(1,7,8)
> elements
> name=c("hydrgen","oxygen","nitrogen") symbols=c("H","O","N")
number=c(1,7,8)
elements
name=c("hydrgen","oxygen","nitrogen") symbols=c("H","O","N")
number=c(1,7,8)
elements
x=1:8
x[5]
x[c(1,4,8)]
x[-4]
x[-c(1,3,3)]
x[-c(1,3,4)]
names(x)=letters[1:8]
x|a|
x[a]
x['a']
x[c('a','c')]
x[-c('b','d')]
x[c('b','d')]
states[1,1]
seq(from=1,to=5)
-7:-2
3:-3
seq(from -3,to=3,by=0,5)
seq(from=-3,to=3,by=0,5)
seq(from=-3,to=3,by=0.5)
seq(from=1,to=20,length.out = 5)
seq(from=0,to=20,length.out = 5)
rep(1,times=5)
rep(c(2,4,6),times=2)
rep(1:3,times=c(3,2,1))
rep(c(2,4,6),each=2,times=2)
seq_along(1)
seq_along(from=0,to=10)
help("seq_along")
seq_along(1.10)
seq_along(along.with = 10)
seq_along(4)
seq_along(41)
x
t
seq_along(t)
seq_along(t,along.with = 10)
seq_along(t)
w <- seq_along(4)
w
w <- seq_along(100)
w
w <- seq_along(t)
w
seq_along(1:10)
seq_len(1:10)
seq_len(10)
seq_len(20)
seq_len(-1)
seq_len(0)
seq_len(1)
/*not applicable to negative number*/
#not applicable to negative number#
num<-c(1,2,3,4,5,6,7,8,9)
num<-c(1,2,3,4,5,6,7,8,9)
lenth(num)
num=c(1,2,3,4,5,6,7,8,9)
length(num)
sort(num.decreasing=TRUE)
sort(num,decreasing=TRUE)
rev(num)
unique(num)
X<-1:7
max(X)
min(X)
range(X)
mean(X)
var(X)
sd(X)
prod(X)
sum(X)
x<-5
(x>0)&(x<10)
(x.0)|(x<10)
(x<0)|(x<10)
(-2*x>0)&(x/2<10)
(-2*x>0)|(x/2<10)
values=-c(1,2,3,4,5,6,7)
values=c(1,2,3,4,5,6,7)
values=c(1,2,3,4,5,6,7,-1,-5,-6)
which(values<0)
which(values>0)
which(values==0)
which.max(values)
which.min(values)
x=c(1,2,3,4,5)
y=c(2,4,6)
union(x,y)
intersect(x,y)
setdiff(x,y)
setdiff(y,x)
setequal(x,y)
is.element(1,x)
x=1:6
x
x<-c(1,2,3,4,5,6)
x
x<-6
z
x
seq(from=1,to=6,byrow=1)
seq(from=1,to=6)
set.seed(1)
a=<-rnorm(100)
a<-rnorm(100)
matrix(a)
P=paste("Life of",pi)
P
tobe=paste("to" , "be" , "or" , "not" , "to", "be",sep="-" )
tobe
Sys.time()
now_ct<-Sys.time()
class(now_ct)
unclass(now_ct)
now_lt<-POSIXlt(now_ct)
now_lt<-as.POSIXlt(now_ct)
nlt<-unclass(now_lt)
nlt
nlt<-unclass(now_lt)
print("hell oworld");
print("hell oworld")
print("hell oworld")
2+2
2+2
print("hell oworld")
2*2
library(shinydashboard)
library(shiny)
install.packages("shiny")
install.packages("installr"); library(installr)
setwd("C:/Users/admin/Desktop/protein stats/ProteinStatsAI-master")
#bio string installation https://bioconductor.org/packages/release/bioc/html/Biostrings.html
#protein stats: ftp://ftp.ebi.ac.uk/pub/databases/pombase/pombe/Protein_data/PeptideStats.tsv
#protein fasta: ftp://ftp.ebi.ac.uk/pub/databases/pombase/FASTA/pep.fa.gz
library("Biostrings")
set.seed(2016)
#path to the folder containing dataset and stats value
path="/ProteinStatsAI/"
#loading protein staistics
p=read.table(file =paste(path,'PeptideStats.tsv', sep = ""), sep = '\t', header = TRUE)
#loading protein fasta file
s = readAAStringSet(paste(path,'pep.fa', sep = ""))
#cleaning sequence ids
stable_id = names(s)
stable_id= sub('\\|.*', '', stable_id)
#getting sequence
sequence = paste(s)
#converting to dataframe
df <- data.frame(names(s),stable_id, sequence,width(s))
dim(df)
dim(p)
#mergeing two data frame
result=merge(df,p, by=c("stable_id"))
dim(unique(result))
#exporting to CSV file
write.csv(result,file=(paste(path,'newpep.csv', sep = "")))
#bio string installation https://bioconductor.org/packages/release/bioc/html/Biostrings.html
#protein stats: ftp://ftp.ebi.ac.uk/pub/databases/pombase/pombe/Protein_data/PeptideStats.tsv
#protein fasta: ftp://ftp.ebi.ac.uk/pub/databases/pombase/FASTA/pep.fa.gz
library("Biostrings")
set.seed(2016)
#path to the folder containing dataset and stats value
#loading protein staistics
p=read.table(file =paste(path,'PeptideStats.tsv', sep = ""), sep = '\t', header = TRUE)
#loading protein fasta file
s = readAAStringSet(paste(path,'pep.fa', sep = ""))
#cleaning sequence ids
stable_id = names(s)
stable_id= sub('\\|.*', '', stable_id)
#getting sequence
sequence = paste(s)
#converting to dataframe
df <- data.frame(names(s),stable_id, sequence,width(s))
dim(df)
dim(p)
#mergeing two data frame
result=merge(df,p, by=c("stable_id"))
dim(unique(result))
#exporting to CSV file
write.csv(result,file=(paste(path,'newpep.csv', sep = "")))
